// DEBUG
RWStructuredBuffer<float3> debugBuffer;

// Read Only
RWStructuredBuffer<int> squareVertices;
RWStructuredBuffer<float3> meshVertices;
RWStructuredBuffer<float4x4> IM_TRSMs;
RWStructuredBuffer<int> collidersToUpdate;
RWStructuredBuffer<float4x4> CC_TRSMs;

// Write Only
RWStructuredBuffer<float3> boxColliderCentres;

// Read and Write

float Add(float x, float y)
{
    return x + y;
}

float3 TransformPoint(float3 toTransform, float4x4 trsMatrix)
{
    float3 vector3;
    
    vector3[0] = (trsMatrix[0][0] * toTransform[0] + trsMatrix[0][1] * toTransform[1] + trsMatrix[0][2] * toTransform[2]) + trsMatrix[0][3];
    vector3[1] = (trsMatrix[1][0] * toTransform[0] + trsMatrix[1][1] * toTransform[1] + trsMatrix[1][2] * toTransform[2]) + trsMatrix[1][3];
    vector3[2] = (trsMatrix[2][0] * toTransform[0] + trsMatrix[2][1] * toTransform[1] + trsMatrix[2][2] * toTransform[2]) + trsMatrix[2][3];
    float num = float1(1) / ((trsMatrix[3][0] * toTransform[0] + trsMatrix[3][1] * toTransform[1] + trsMatrix[3][2] * toTransform[2]) + trsMatrix[3][3]);
    vector3[0] = vector3[0] * num;
    vector3[1] = vector3[1] * num;
    vector3[2] = vector3[2] * num;

    return vector3;
}

float3 TransformDirection(float3 toTransform, float4 rotationMatrix)
{
    float3 t = 2 * cross(float3(rotationMatrix[0], rotationMatrix[1], rotationMatrix[2]), toTransform);

    return toTransform + rotationMatrix[3] * t + cross(float3(rotationMatrix[0], rotationMatrix[1], rotationMatrix[2]), t);
}

#pragma kernel Main
[numthreads(3, 3, 1)]
void Main(uint3 id : SV_DispatchThreadID)
{
    debugBuffer[id.x][id.y] = Add(id.x, id.y);

    int colliderIndex = collidersToUpdate[id.x];
    
    //squareVertices[0] = 69;
    //meshVertices[1] = float3(69, 420, 999);
    //IM_TRSMs[0][1][1] = 69;
    
    //debugBuffer[id.x] = TransformPoint(float3(2, 2, 2), IM_TRSMs[0]);
    
    float3 boxColliderCentre = float3(0, 0, 0);
    
    for (int i = 0; i < 4; i++)
    {
        boxColliderCentre = boxColliderCentre + TransformPoint(meshVertices[squareVertices[(4 * colliderIndex) + i]], IM_TRSMs[colliderIndex]);
    }
    
    boxColliderCentres[id.x] = boxColliderCentre / 4;
    
    
    
    //debugBuffer[id.x] = boxColliderCentre;

}