/*RWStructuredBuffer<float3> meshVertices;
RWStructuredBuffer<int> connectedSquareNodes;
RWStructuredBuffer<int> unconnectedSquareNodes;
RWStructuredBuffer<float3> debugBuffer;
RWStructuredBuffer<float4x4> CC_TRSMs;
RWStructuredBuffer<float4x4> CC_Local_TRSMs;
RWStructuredBuffer<int> collidersToUpdate;
RWStructuredBuffer<int> sideOrders_X;
RWStructuredBuffer<int> sideOrders_Y;
RWStructuredBuffer<float> returnRotationAngles;
RWStructuredBuffer<float3> returnColliderSizes;

float4x4 thisTransform;

static const float PI = 3.14159265f;
static const float kEpsilonNormalSqrt = 1e-15F;

float ConvertRadiansToDegrees(float radians)
{
    return (180 / PI) * radians;
}

// FROM https://gist.github.com/aeroson/043001ca12fe29ee911e
float4 LookRotation(float3 forward, float3 up)
{
    forward = normalize(forward);
    float3 right = normalize(cross(up, forward));
    up = cross(forward, right);
    float m00 = right.x;
    float m01 = right.y;
    float m02 = right.z;
    float m10 = up.x;
    float m11 = up.y;
    float m12 = up.z;
    float m20 = forward.x;
    float m21 = forward.y;
    float m22 = forward.z;

    float num8 = (m00 + m11) + m22;
    float4 quaternion = float4(0, 0, 0, 0);
    
    if (num8 > 0)
    {
        float num = sqrt(num8 + 1);
        quaternion.w = num * 0.5;
        num = 0.5 / num;
        quaternion.x = (m12 - m21) * num;
        quaternion.y = (m20 - m02) * num;
        quaternion.z = (m01 - m10) * num;
        
        return quaternion;
    }
    if ((m00 >= m11) && (m00 >= m22))
    {
        float num7 = sqrt(((1 + m00) - m11) - m22);
        float num4 = 0.5 / num7;
        quaternion.x = 0.5 * num7;
        quaternion.y = (m01 + m10) * num4;
        quaternion.z = (m02 + m20) * num4;
        quaternion.w = (m12 - m21) * num4;
        
        return quaternion;
    }
    if (m11 > m22)
    {
        float num6 = sqrt(((1 + m11) - m00) - m22);
        float num3 = 0.5 / num6;
        quaternion.x = (m10 + m01) * num3;
        quaternion.y = 0.5 * num6;
        quaternion.z = (m21 + m12) * num3;
        quaternion.w = (m20 - m02) * num3;
        
        return quaternion;
    }
    
    float num5 = sqrt(((1 + m22) - m00) - m11);
    float num2 = 0.5 / num5;
    quaternion.x = (m20 + m02) * num2;
    quaternion.y = (m21 + m12) * num2;
    quaternion.z = 0.5 * num5;
    quaternion.w = (m01 - m10) * num2;

    return float4(quaternion.x, quaternion.y, quaternion.z, quaternion.w);
}

float3 TransformPoint(float3 toTransform, float4x4 trsMatrix)
{
    float3 vector3;
    
    vector3[0] = (trsMatrix[0][0] * toTransform[0] + trsMatrix[0][1] * toTransform[1] + trsMatrix[0][2] * toTransform[2]) + trsMatrix[0][3];
    vector3[1] = (trsMatrix[1][0] * toTransform[0] + trsMatrix[1][1] * toTransform[1] + trsMatrix[1][2] * toTransform[2]) + trsMatrix[1][3];
    vector3[2] = (trsMatrix[2][0] * toTransform[0] + trsMatrix[2][1] * toTransform[1] + trsMatrix[2][2] * toTransform[2]) + trsMatrix[2][3];
    float num = float1(1) / ((trsMatrix[3][0] * toTransform[0] + trsMatrix[3][1] * toTransform[1] + trsMatrix[3][2] * toTransform[2]) + trsMatrix[3][3]);
    vector3[0] = vector3[0] * num;
    vector3[1] = vector3[1] * num;
    vector3[2] = vector3[2] * num;

    return vector3;
}

float3 TransformDirection(float3 toTransform, float4 rotationQuaternion)
{
    float3 t = 2 * cross(float3(rotationQuaternion[0], rotationQuaternion[1], rotationQuaternion[2]), toTransform);

    return toTransform + rotationQuaternion[3] * t + cross(float3(rotationQuaternion[0], rotationQuaternion[1], rotationQuaternion[2]), t);
}

float4x4 GetTranslationMatrix(float3 position)
{
    return float4x4(1, 0, 0, position[0],
                    0, 1, 0, position[1],
                    0, 0, 1, position[2],
                    0, 0, 0, 1);
}

float4x4 GetRotationMatrix(float3 radianAngles)
{
    float4x4 rotationX = float4x4(1, 0, 0, 0,
                                  0, cos(radianAngles[0]), -sin(radianAngles[0]), 0,
                                  0, sin(radianAngles[0]), cos(radianAngles[0]), 0,
                                  0, 0, 0, 1);
    
    float4x4 rotationY = float4x4(cos(radianAngles[1]), 0, sin(radianAngles[1]), 0,
                                  0, 1, 0, 0,
                                  -sin(radianAngles[1]), 0, cos(radianAngles[1]), 0,
                                  0, 0, 0, 1);
    
    float4x4 rotationZ = float4x4(cos(radianAngles[2]), -sin(radianAngles[2]), 0, 0,
                                  sin(radianAngles[2]), cos(radianAngles[2]), 0, 0,
                                  0, 0, 1, 0,
                                  0, 0, 0, 1);
    
    float4x4 x_By_y = mul(rotationX, rotationY);
    float4x4 result = mul(x_By_y, rotationZ);
    
    return result;
}

float4x4 GetScaleMatrix(float3 scale)
{
    return float4x4(scale[0], 0, 0, 0,
                    0, scale[1], 0, 0,
                    0, 0, scale[2], 0,
                    0, 0, 0, 1);
}

float4x4 ComposeTRSM(float3 position, float3 rotation, float3 scale)
{
    float4x4 translationMatrix = GetTranslationMatrix(position);
    float4x4 rotationMatrix = GetRotationMatrix(rotation);
    float4x4 scaleMatrix = GetScaleMatrix(scale);
    
    float4x4 t_by_r = mul(translationMatrix, rotationMatrix);
    float4x4 result = mul(t_by_r, scaleMatrix);

    return result;
}

// Returns in the order of right, up, forward --> (x, y, z)
float3x3 GetAxisDirectionsFromTRSM(float4x4 trsm)
{
    return float3x3(trsm[0][0], trsm[1][0], trsm[2][0],
                    trsm[0][1], trsm[1][1], trsm[2][1],
                    trsm[0][2], trsm[1][2], trsm[2][2]);
}

// Returns [0] = position
// Returns [1] = rotation
// Returns [2] = scale
float3x4 DecomposeTRSM(float4x4 TRSM)
{
    // In the order of translation, rotation, scale (ROW-MAJOR)

    float4 position = float4(TRSM[0][3], TRSM[1][3], TRSM[2][3], 0);
    float4 rotation = LookRotation(float3(TRSM[0][2], TRSM[1][2], TRSM[2][2]), float3(TRSM[0][1], TRSM[1][1], TRSM[2][1]));
    float4 scale = float4(length(float3(TRSM[0][0], TRSM[1][0], TRSM[2][0])), length(float3(TRSM[0][1], TRSM[1][1], TRSM[2][1])), length(float3(TRSM[0][2], TRSM[1][2], TRSM[2][2])), 0);

    float3x4 toReturn = float3x4(position[0], position[1], position[2], 0,
                                rotation[0], rotation[1], rotation[2], rotation[3],
                                scale[0], scale[1], scale[2], 0);
    return toReturn;
}

float4x4 UpdatePosition(float4x4 TRSM, float3 newPosition)
{
    return float4x4(TRSM[0][0], TRSM[0][1], TRSM[0][2], newPosition[0],
                    TRSM[1][0], TRSM[1][1], TRSM[1][2], newPosition[1],
                    TRSM[2][0], TRSM[2][1], TRSM[2][2], newPosition[2],
                    TRSM[3][0], TRSM[3][1], TRSM[3][2], TRSM[3][3]);
}

float3 ThreeAxisRot(float r11, float r12, float r21, float r31, float r32)
{
    return float3(asin(r21), atan2(r11, r12), atan2(r31, r32));
}

// NOT WORKING
float3 QuaternionToEulerAngles(float4 q)
{
    float3 rotationRadians = ThreeAxisRot(2 * (q.x * q.z + q.w * q.y),
                     q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z,
                    -2 * (q.y * q.z - q.w * q.x),
                     2 * (q.x * q.y + q.w * q.z),
                     q.w * q.w - q.x * q.x + q.y * q.y - q.z * q.z);
    
    return float3(degrees(rotationRadians[0]), degrees(rotationRadians[1]), degrees(rotationRadians[2]));

}

// Since quaternions are too complicated without Unity's libraries,
// we are just going to do the bulk of the processing and return it to Unity.
float4x4 GenerateReturnMatrix(float3 position, float4 rotation, float3 scale)
{
    return float4x4(position[0], position[1], position[2], 0,
                    rotation[0], rotation[1], rotation[2], rotation[3],
                    scale[0], scale[1], scale[2], 0,
                    0, 0, 0, 0);
}

float SqrMagnitude(float3 input)
{
    return (input[0] * input[0]) + (input[1] * input[1]) + (input[2] * input[2]);
}

float Angle(float3 from, float3 to)
{
    float denominator = sqrt(SqrMagnitude(from) * SqrMagnitude(to));
    if (denominator < kEpsilonNormalSqrt)
        return 0;

    float dotProduct = clamp((dot(from, to) / denominator), -1, 1);
    return degrees(acos(dotProduct));
}

float SignedAngle(float3 from, float3 to, float3 axis)
{
    float unsignedAngle = Angle(from, to);

    float cross_x = from.y * to.z - from.z * to.y;
    float cross_y = from.z * to.x - from.x * to.z;
    float cross_z = from.x * to.y - from.y * to.x;
    float angleSign = sign(axis.x * cross_x + axis.y * cross_y + axis.z * cross_z);
    
    return unsignedAngle * angleSign;
}

#pragma kernel Main2
[numthreads(3, 3, 1)]
void Main2(uint3 id : SV_DispatchThreadID)
{
    int colliderIndex = collidersToUpdate[id.x];
    
    float4 transformRotation = DecomposeTRSM(thisTransform)[1];
    float3 vec1 = TransformDirection(meshVertices[unconnectedSquareNodes[(2 * colliderIndex) + 0]] - meshVertices[connectedSquareNodes[(2 * colliderIndex) + 0]], transformRotation);
    float3 vec2 = TransformDirection(meshVertices[connectedSquareNodes[(2 * colliderIndex) + 1]] - meshVertices[unconnectedSquareNodes[(2 * colliderIndex) + 0]], transformRotation);
    float3 vec3 = TransformDirection(meshVertices[unconnectedSquareNodes[(2 * colliderIndex) + 1]] - meshVertices[connectedSquareNodes[(2 * colliderIndex) + 1]], transformRotation);
    float3 vec4 = TransformDirection(meshVertices[connectedSquareNodes[(2 * colliderIndex) + 0]] - meshVertices[unconnectedSquareNodes[(2 * colliderIndex) + 1]], transformRotation);
    
    float3 averageSideVector = normalize(vec2 - vec4);
    
    float3 correctColliderUp = cross(averageSideVector, TransformDirection(GetAxisDirectionsFromTRSM(CC_TRSMs[id.x])[2], transformRotation));
    float3 currentColliderUp = TransformDirection(GetAxisDirectionsFromTRSM(CC_TRSMs[id.x])[2], transformRotation);
    float rotationAngle = SignedAngle(correctColliderUp, currentColliderUp, TransformDirection(GetAxisDirectionsFromTRSM(CC_TRSMs[id.x])[2], transformRotation));

    debugBuffer[id.x] = rotationAngle;
    returnRotationAngles[id.x] = rotationAngle;
    
    float4x3 sideVectors = float4x3(vec1, vec2, vec3, vec4);
    float xSideLength = (length(sideVectors[sideOrders_X[(2 * colliderIndex) + 0]]) + length(sideVectors[sideOrders_X[(2 * colliderIndex) + 1]])) / 2;
    float ySideLength = (length(sideVectors[sideOrders_Y[(2 * colliderIndex) + 0]]) + length(sideVectors[sideOrders_Y[(2 * colliderIndex) + 1]])) / 2;
    
    returnColliderSizes[id.x] = float3(xSideLength, ySideLength, 0.0001);
}*/