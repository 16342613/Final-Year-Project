// DEBUG
RWStructuredBuffer<float3> debugBuffer;

// Read Only
RWStructuredBuffer<int> squareVertices;
RWStructuredBuffer<float3> meshVertices;
RWStructuredBuffer<int> collidersToUpdate;
RWStructuredBuffer<float3> meshNormals;
RWStructuredBuffer<float4x4> IM_TRSMs;

RWStructuredBuffer<float4x4> CCglobal_CClocal_IMglobalTRSMs;
RWStructuredBuffer<int> squareNodeConnections;
RWStructuredBuffer<int> sideOrders_XY;

// Write Only
RWStructuredBuffer<float4x4> returnDetails;
RWStructuredBuffer<float> returnRotationAngles;
RWStructuredBuffer<float4> returnDetails2;

// Read and Write
float4x4 thisTransform;

// Constants
static const float PI = 3.14159265f;
static const float kEpsilonNormalSqrt = 1e-15F;

float ConvertRadiansToDegrees(float radians)
{
    return (180 / PI) * radians;
}

float4 NormalizeQuaternion(float4 q)
{
    float mag = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);

    if (mag < kEpsilonNormalSqrt)
        return float4(0, 0, 0, 1);

    return float4(q[0] / mag, q[1] / mag, q[2] / mag, q[3] / mag);
}

float4 FromToRotation(float3 from, float3 to)
{
    float3 a = cross(from, to);
    
    float4 q = float4(a[0], a[1], a[2], sqrt((length(from) * length(from)) * (length(to) * length(to))) + dot(from, to));

    return NormalizeQuaternion(q);
}

// Returns true if they are the same
bool CompareFloat3(float3 a, float3 b)
{
    if (a[0] != b[0])
    {
        return false;
    }
    
    if (a[1] != b[1])
    {
        return false;
    }
    
    if (a[2] != b[2])
    {
        return false;
    }

    return true;
}

// From https://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
float4 MultiplyQuaternions(float4 q1, float4 q2)
{
    float x = q1.x * q2.w + q1.y * q2.z - q1.z * q2.y + q1.w * q2.x;
    float y = -q1.x * q2.z + q1.y * q2.w + q1.z * q2.x + q1.w * q2.y;
    float z = q1.x * q2.y - q1.y * q2.x + q1.z * q2.w + q1.w * q2.z;
    float w = -q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w;
    
    return float4(x, y, z, w);
}

float3 TransformPoint(float3 toTransform, float4x4 trsMatrix)
{
    float3 vector3;
    
    vector3[0] = (trsMatrix[0][0] * toTransform[0] + trsMatrix[0][1] * toTransform[1] + trsMatrix[0][2] * toTransform[2]) + trsMatrix[0][3];
    vector3[1] = (trsMatrix[1][0] * toTransform[0] + trsMatrix[1][1] * toTransform[1] + trsMatrix[1][2] * toTransform[2]) + trsMatrix[1][3];
    vector3[2] = (trsMatrix[2][0] * toTransform[0] + trsMatrix[2][1] * toTransform[1] + trsMatrix[2][2] * toTransform[2]) + trsMatrix[2][3];
    float num = float(1) / ((trsMatrix[3][0] * toTransform[0] + trsMatrix[3][1] * toTransform[1] + trsMatrix[3][2] * toTransform[2]) + trsMatrix[3][3]);
    vector3[0] = vector3[0] * num;
    vector3[1] = vector3[1] * num;
    vector3[2] = vector3[2] * num;

    return vector3;
}

float3 TransformDirection(float3 toTransform, float4 rotationQuaternion)
{
    float3 t = float(2) * cross(float3(rotationQuaternion[0], rotationQuaternion[1], rotationQuaternion[2]), toTransform);

    return (toTransform + (rotationQuaternion[3] * t)) + cross(float3(rotationQuaternion[0], rotationQuaternion[1], rotationQuaternion[2]), t);
}

float4x4 GetTranslationMatrix(float3 position)
{
    return float4x4(1, 0, 0, position[0],
                    0, 1, 0, position[1],
                    0, 0, 1, position[2],
                    0, 0, 0, 1);
}

float4x4 GetRotationMatrix(float3 radianAngles)
{
    float4x4 rotationX = float4x4(1, 0, 0, 0,
                                  0, cos(radianAngles[0]), -sin(radianAngles[0]), 0,
                                  0, sin(radianAngles[0]), cos(radianAngles[0]), 0,
                                  0, 0, 0, 1);
    
    float4x4 rotationY = float4x4(cos(radianAngles[1]), 0, sin(radianAngles[1]), 0,
                                  0, 1, 0, 0,
                                  -sin(radianAngles[1]), 0, cos(radianAngles[1]), 0,
                                  0, 0, 0, 1);
    
    float4x4 rotationZ = float4x4(cos(radianAngles[2]), -sin(radianAngles[2]), 0, 0,
                                  sin(radianAngles[2]), cos(radianAngles[2]), 0, 0,
                                  0, 0, 1, 0,
                                  0, 0, 0, 1);
    
    float4x4 x_By_y = mul(rotationX, rotationY);
    float4x4 result = mul(x_By_y, rotationZ);
    
    return result;
}

float4x4 GetScaleMatrix(float3 scale)
{
    return float4x4(scale[0], 0, 0, 0,
                    0, scale[1], 0, 0,
                    0, 0, scale[2], 0,
                    0, 0, 0, 1);
}

float4x4 ComposeTRSM(float3 position, float3 rotation, float3 scale)
{
    float4x4 translationMatrix = GetTranslationMatrix(position);
    float4x4 rotationMatrix = GetRotationMatrix(rotation);
    float4x4 scaleMatrix = GetScaleMatrix(scale);
    
    float4x4 t_by_r = mul(translationMatrix, rotationMatrix);
    float4x4 result = mul(t_by_r, scaleMatrix);

    return result;
}

// Returns in the order of right, up, forward --> (x Axis, y Axis, z Axis)
float3x3 GetAxisDirectionsFromTRSM(float4x4 trsm)
{
    return float3x3(trsm[0][0], trsm[1][0], trsm[2][0],
                    trsm[0][1], trsm[1][1], trsm[2][1],
                    trsm[0][2], trsm[1][2], trsm[2][2]);
}

// A conversion from unreal engine's LookAt to Unity's LookAt 
    // https://forums.unrealengine.com/development-discussion/c-gameplay-programming/1482788-posting-the-source-code-for-lookrotation-for-those-who-need-it
float4 MyLookRotation(float3 lookAt, float3 upDirection)
{
    float3 forward = lookAt;
    float3 up = upDirection;


    forward = normalize(forward);
    up = up - (forward * dot(up, forward));
    up = normalize(up);

    float3 vec = normalize(forward);
    float3 vector2 = cross(up, vec);
    float3 vector3 = cross(vec, vector2);
    
    float m00 = vector2.x;
    float m01 = vector2.y;
    float m02 = vector2.z;
    float m10 = vector3.x;
    float m11 = vector3.y;
    float m12 = vector3.z;
    float m20 = vec.x;
    float m21 = vec.y;
    float m22 = vec.z;

    float num8 = (m00 + m11) + m22;
    float4 quaternion = float4(0, 0, 0, 0);
    
    if (num8 > 0.0)
    {
        float num = sqrt(num8 + 1);
        quaternion.w = num * 0.5;
        num = 0.5 / num;
        quaternion.x = (m12 - m21) * num;
        quaternion.y = (m20 - m02) * num;
        quaternion.z = (m01 - m10) * num;
        return quaternion;
    }
    if ((m00 >= m11) && (m00 >= m22))
    {
        float num7 = sqrt(((1 + m00) - m11) - m22);
        float num4 = 0.5 / num7;
        quaternion.x = 0.5 * num7;
        quaternion.y = (m01 + m10) * num4;
        quaternion.z = (m02 + m20) * num4;
        quaternion.w = (m12 - m21) * num4;
        return quaternion;
    }
    if (m11 > m22)
    {
        float num6 = sqrt(((1 + m11) - m00) - m22);
        float num3 = 0.5 / num6;
        quaternion.x = (m10 + m01) * num3;
        quaternion.y = 0.5 * num6;
        quaternion.z = (m21 + m12) * num3;
        quaternion.w = (m20 - m02) * num3;
        return quaternion;
    }
    float num5 = sqrt(((1 + m22) - m00) - m11);
    float num2 = 0.5 / num5;
    quaternion.x = (m20 + m02) * num2;
    quaternion.y = (m21 + m12) * num2;
    quaternion.z = 0.5 * num5;
    quaternion.w = (m01 - m10) * num2;


    return quaternion;
}

// Returns [0] = position
// Returns [1] = rotation
// Returns [2] = scale
float3x4 DecomposeTRSM(float4x4 TRSM)
{
    // In the order of translation, rotation, scale (ROW-MAJOR)

    float4 position = float4(TRSM[0][3], TRSM[1][3], TRSM[2][3], 0);
    float4 rotation = MyLookRotation(float3(TRSM[0][2], TRSM[1][2], TRSM[2][2]), float3(TRSM[0][1], TRSM[1][1], TRSM[2][1]));
    float4 scale = float4(length(float3(TRSM[0][0], TRSM[1][0], TRSM[2][0])), length(float3(TRSM[0][1], TRSM[1][1], TRSM[2][1])), length(float3(TRSM[0][2], TRSM[1][2], TRSM[2][2])), 0);

    float3x4 toReturn = float3x4(position[0], position[1], position[2], 0,
                                rotation[0], rotation[1], rotation[2], rotation[3],
                                scale[0], scale[1], scale[2], 0);
    return toReturn;
}

float4x4 UpdatePosition(float4x4 TRSM, float3 newPosition)
{
    return float4x4(TRSM[0][0], TRSM[0][1], TRSM[0][2], newPosition[0],
                    TRSM[1][0], TRSM[1][1], TRSM[1][2], newPosition[1],
                    TRSM[2][0], TRSM[2][1], TRSM[2][2], newPosition[2],
                    TRSM[3][0], TRSM[3][1], TRSM[3][2], TRSM[3][3]);
}

float3 ThreeAxisRot(float r11, float r12, float r21, float r31, float r32)
{
    return float3(asin(r21), atan2(r11, r12), atan2(r31, r32));
}

// NOT WORKING
float3 QuaternionToEulerAngles(float4 q)
{
    float3 rotationRadians = ThreeAxisRot(2 * (q.x * q.z + q.w * q.y),
                     q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z,
                    -2 * (q.y * q.z - q.w * q.x),
                     2 * (q.x * q.y + q.w * q.z),
                     q.w * q.w - q.x * q.x + q.y * q.y - q.z * q.z);
    
    return float3(degrees(rotationRadians[0]), degrees(rotationRadians[1]), degrees(rotationRadians[2]));

}

// Since quaternions are too complicated without Unity's libraries,
// we are just going to do the bulk of the processing and return it to Unity.
float4x4 GenerateReturnMatrix(float3 position, float4 rotation, float3 scale)
{
    return float4x4(position[0], position[1], position[2], 0,
                    rotation[0], rotation[1], rotation[2], rotation[3],
                    scale[0], scale[1], scale[2], 0,
                    0, 0, 0, 0);
}

float SqrMagnitude(float3 input)
{
    return (input[0] * input[0]) + (input[1] * input[1]) + (input[2] * input[2]);
}

float Angle(float3 from, float3 to)
{
    float denominator = sqrt(SqrMagnitude(from) * SqrMagnitude(to));
    if (denominator < kEpsilonNormalSqrt)
        return 0;

    float dotProduct = clamp((dot(from, to) / denominator), -1, 1);
    return degrees(acos(dotProduct));
}

float SignedAngle(float3 from, float3 to, float3 axis)
{
    float unsignedAngle = Angle(from, to);

    float cross_x = from.y * to.z - from.z * to.y;
    float cross_y = from.z * to.x - from.x * to.z;
    float cross_z = from.x * to.y - from.y * to.x;
    float angleSign = sign(axis.x * cross_x + axis.y * cross_y + axis.z * cross_z);
    
    return unsignedAngle * angleSign;
}

float3 RotateVectorByQuaternion(float3 v, float4 r)
{
    float4 r_c = r * float4(-1, -1, -1, 1);
    return MultiplyQuaternions(r, MultiplyQuaternions(float4(v, 0), r_c)).xyz;
}

/// REFERENCE POINT 11
#pragma kernel RecalculateCentreAndXYRotations
[numthreads(1, 1, 1)]   // Each thread pool is 1x1x1 thread/s
void RecalculateCentreAndXYRotations(uint3 id : SV_DispatchThreadID)
{
    // Get the collider index
    int colliderIndex = collidersToUpdate[id.x];
    // Get the current collider's intermediate object TRS matrix
    float4x4 currentIM_TRSM = IM_TRSMs[id.x];
    
    // Recalculate the boxcollider centre using a custom TransformPoint method
    float3 boxColliderCentre = (TransformPoint(meshVertices[squareVertices[(4 * colliderIndex) + 0]], currentIM_TRSM) +
                                TransformPoint(meshVertices[squareVertices[(4 * colliderIndex) + 1]], currentIM_TRSM) +
                                TransformPoint(meshVertices[squareVertices[(4 * colliderIndex) + 2]], currentIM_TRSM) +
                                TransformPoint(meshVertices[squareVertices[(4 * colliderIndex) + 3]], currentIM_TRSM)) / 4;
    
    // Recalculate the average normal
    float3 averageNormal = (meshNormals[squareVertices[(4 * colliderIndex) + 0]] +
                            meshNormals[squareVertices[(4 * colliderIndex) + 1]] +
                            meshNormals[squareVertices[(4 * colliderIndex) + 2]] +
                            meshNormals[squareVertices[(4 * colliderIndex) + 3]]) / 4;
    
    // Get the new look rotation of the collider using custom matrix methods
    float4 rotation = MyLookRotation(TransformDirection(averageNormal, DecomposeTRSM(currentIM_TRSM)[1]), 
                                     GetAxisDirectionsFromTRSM(currentIM_TRSM)[1]);
    
    // Send back the collider's new centre, rotation and scale, all in one buffer for optimisation
    returnDetails[id.x] = GenerateReturnMatrix(boxColliderCentre, rotation, float3(1, 1, 1));
}

#pragma kernel RecalculateColliderZRotationAndSize
[numthreads(1, 1, 1)]   // Each thread pool is 1x1x1 thread/s
void RecalculateColliderZRotationAndSize(uint3 id : SV_DispatchThreadID)
{
    // Retrieve the data from the compute buffers
    int colliderIndex = collidersToUpdate[id.x];
    float4x4 colliderContainerGlobalTransform = CCglobal_CClocal_IMglobalTRSMs[(3 * id.x) + 0];
    float4x4 colliderContainerLocalTransform = CCglobal_CClocal_IMglobalTRSMs[(3 * id.x) + 1];
    float4 intermediateObjectRotation = DecomposeTRSM(CCglobal_CClocal_IMglobalTRSMs[(3 * id.x) + 2])[1];
    float4 transformRotation = DecomposeTRSM(thisTransform)[1];
    
    // Get the sides of the SCTP polygon using custom matrix methods
    float3 vec1 = TransformDirection(TransformDirection(meshVertices[squareNodeConnections[(4 * colliderIndex) + 2]] - 
                    meshVertices[squareNodeConnections[(4 * colliderIndex) + 0]], intermediateObjectRotation), transformRotation);
    float3 vec2 = TransformDirection(TransformDirection(meshVertices[squareNodeConnections[(4 * colliderIndex) + 1]] - 
                    meshVertices[squareNodeConnections[(4 * colliderIndex) + 2]], intermediateObjectRotation), transformRotation);
    float3 vec3 = TransformDirection(TransformDirection(meshVertices[squareNodeConnections[(4 * colliderIndex) + 3]] - 
                    meshVertices[squareNodeConnections[(4 * colliderIndex) + 1]], intermediateObjectRotation), transformRotation);
    float3 vec4 = TransformDirection(TransformDirection(meshVertices[squareNodeConnections[(4 * colliderIndex) + 0]] - 
                    meshVertices[squareNodeConnections[(4 * colliderIndex) + 3]], intermediateObjectRotation), transformRotation);
    
    // Recompute the average side vector
    float3 averageSideVector = normalize(vec2 - vec4);
    
    // Recalculate the correct z axis rotation angle of the box collider
    float3 correctColliderUp = cross(averageSideVector, TransformDirection(
                                 GetAxisDirectionsFromTRSM(colliderContainerGlobalTransform)[2], transformRotation));
    float3 currentColliderUp = TransformDirection(GetAxisDirectionsFromTRSM(colliderContainerGlobalTransform)[1], transformRotation);
    float rotationAngle = SignedAngle(correctColliderUp, currentColliderUp, 
                                 TransformDirection(GetAxisDirectionsFromTRSM(colliderContainerGlobalTransform)[2], transformRotation));
    
    // Recalculate the correct size of the box collider
    float4x3 sideVectors = float4x3(vec1, vec2, vec3, vec4);
    float xSideLength = (length(sideVectors[sideOrders_XY[(4 * colliderIndex) + 0]]) + 
                         length(sideVectors[sideOrders_XY[(4 * colliderIndex) + 1]])) / 2;
    float ySideLength = (length(sideVectors[sideOrders_XY[(4 * colliderIndex) + 2]]) + 
                         length(sideVectors[sideOrders_XY[(4 * colliderIndex) + 3]])) / 2;
    
    float3 colliderSize = float3(xSideLength, ySideLength, 0.01);
    
    // Populate the return buffer
    returnDetails2[id.x][0] = colliderSize.x;
    returnDetails2[id.x][1] = colliderSize.y;
    returnDetails2[id.x][2] = colliderSize.z;
    returnDetails2[id.x][3] = rotationAngle;
}